<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>/dev/pboehm</title>
    <link>https://blog.pboehm.org/tags/devops/index.xml</link>
    <description>Recent content on /dev/pboehm</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://blog.pboehm.org/tags/devops/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SSH Features: Bridging two networks</title>
      <link>https://blog.pboehm.org/blog/2016/12/07/ssh-features-bridging-two-networks/</link>
      <pubDate>Wed, 07 Dec 2016 22:49:59 +0100</pubDate>
      
      <guid>https://blog.pboehm.org/blog/2016/12/07/ssh-features-bridging-two-networks/</guid>
      <description>&lt;p&gt;There are many cases where two networks have to be connected on Layer 2 in a
virtual fashion, which is referred to as a Virtual Private Network (VPN).
Typically you would use &lt;a href=&#34;https://openvpn.net/&#34;&gt;OpenVPN&lt;/a&gt; or similar software
for that. All of these tools have in common that they require some non trivial
setup steps like setting up a PKI or exchanging keys or certificates in a
safe way.&lt;/p&gt;

&lt;p&gt;As a programmer, setting up a full fledged VPN software for a development
environment which is destroyed regularly seems not be the best option. A
question that normally comes to my mind in these moments is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Can I use SSH for that?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The answer is usually YES, like in this case. For the first part of an ongoing
series about little known SSH features, we&amp;rsquo;ll take a look at the &lt;code&gt;-w&lt;/code&gt; command
line flag which allows bridging of two ethernet networks using &lt;code&gt;tap&lt;/code&gt;-devices.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;bridging-via-tap-devices&#34;&gt;Bridging via tap-devices&lt;/h2&gt;

&lt;p&gt;VPNs can be implemented on different
&lt;a href=&#34;https://en.wikipedia.org/wiki/OSI_model&#34;&gt;OSI&lt;/a&gt;-layers which depends on the
desired network architecture. Usually you have to choose between a Layer-2 or
Layer-3-VPN which can be compared to connecting two separate network segments
using either a switch (Layer 2) or a router (Layer 3). Choosing between these
two types of VPNs also corresponds to the type of virtual network interface
which have to be used. A Layer-2-VPN requires the usage of a &lt;code&gt;tap&lt;/code&gt;-device while
a Layer-3-VPN is usually implemented using a &lt;code&gt;tun&lt;/code&gt;-device.&lt;/p&gt;

&lt;p&gt;OpenSSH supports both tunneling on Layer-2 and Layer-3 but the rest of this post
will focus on Layer-2-VPNs using &lt;code&gt;tap&lt;/code&gt;-devices.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;This feature requires an OpenSSH server to be installed on the remote site
with the following settings configured in &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;:&lt;/p&gt;


  
    
  
  
    
  
  
  


&lt;figure class=&#34;highlight config&#34;&gt;
  &lt;figcaption&gt;
    
      &lt;span&gt;/etc/ssh/sshd_config&lt;/span&gt;
    
  &lt;/figcaption&gt;
  &lt;table&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td class=&#34;gutter&#34;&gt;
          &lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;
        &lt;/td&gt;
        &lt;td class=&#34;code&#34;&gt;
          &lt;pre class=&#34;config code-highlight&#34;&gt;# ...
PermitTunnel yes
PermitRootLogin yes&lt;/pre&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/figure&gt;

&lt;p&gt;As you can see this setup requires root login, because creating tap devices
normally requires these permissions. &lt;code&gt;PermitRootLogin yes&lt;/code&gt; allows login as
root using a password which is naturally a bad idea. If possible
&lt;code&gt;PermitRootLogin without-password&lt;/code&gt; should be used instead, which allows login
as root only using public key authentication.&lt;/p&gt;

&lt;h3 id=&#34;creating-the-tunnel&#34;&gt;Creating the tunnel&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;root » ssh -o Tunnel=ethernet -w 5:5 -t root@REMOTE_HOST
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After executing this command with successful authentication a device called
&lt;code&gt;tap5&lt;/code&gt; is created on each side of the tunnel, which works but the interface
are shut down. The argument &lt;code&gt;-w X:Y&lt;/code&gt; specifies which device numbers should
be used on the local and remote side.&lt;/p&gt;

&lt;h2 id=&#34;configuring-bridge-interfaces-using-systemd-networkd&#34;&gt;Configuring bridge interfaces using systemd-networkd&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;tap&lt;/code&gt;-devices are not that useful without being attached to a real network
interface. That&amp;rsquo;s the reason why they are normally attached to a bridge
interface on each side. Setting up bridge interfaces is usually done using
the &lt;code&gt;brctl&lt;/code&gt; command provided by the &lt;code&gt;bridge-utils&lt;/code&gt; package. For distributions
using &lt;code&gt;systemd&lt;/code&gt; and its network daemon the following two config files
will create the bridge interface &lt;code&gt;br-remote&lt;/code&gt; in a way that survives a reboot.&lt;/p&gt;


  
    
  
  
    
  
  
  


&lt;figure class=&#34;highlight ini&#34;&gt;
  &lt;figcaption&gt;
    
      &lt;span&gt;/etc/systemd/network/br-remote.netdev&lt;/span&gt;
    
  &lt;/figcaption&gt;
  &lt;table&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td class=&#34;gutter&#34;&gt;
          &lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;
        &lt;/td&gt;
        &lt;td class=&#34;code&#34;&gt;
          &lt;pre class=&#34;ini code-highlight&#34;&gt;[NetDev]
Name=br-remote
Kind=bridge&lt;/pre&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/figure&gt;


  
    
  
  
    
  
  
  


&lt;figure class=&#34;highlight ini&#34;&gt;
  &lt;figcaption&gt;
    
      &lt;span&gt;/etc/systemd/network/br-remote.network&lt;/span&gt;
    
  &lt;/figcaption&gt;
  &lt;table&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td class=&#34;gutter&#34;&gt;
          &lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;
        &lt;/td&gt;
        &lt;td class=&#34;code&#34;&gt;
          &lt;pre class=&#34;ini code-highlight&#34;&gt;[Match]
Name=br-remote&lt;/pre&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/figure&gt;

&lt;p&gt;After adding these files the following command has to be executed for the
network daemon to apply the new configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;systemctl restart systemd-networkd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have a working bridge interface called &lt;code&gt;br-remote&lt;/code&gt; which has no
interfaces attached to it. Adding the &lt;code&gt;tap5&lt;/code&gt; interface to the bridge is done
by the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root » brctl addif br-remote tap5
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;putting-it-all-together&#34;&gt;Putting it all together&lt;/h2&gt;

&lt;p&gt;Because the simple SSH command described above requires some additional commands
to be executed on both sides of the tunnel it would be cool to join these
commands in a single command executed on the client.&lt;/p&gt;

&lt;p&gt;A well known feature of SSH is that the first real argument to the ssh command is
treated as a command that is executed on the remote side after setting up the
tunnel. A lesser known feature is that this also exists for the local
side through the &lt;code&gt;LocalCommand&lt;/code&gt; option which executes a command on the local
side after setting up the SSH tunnel.&lt;/p&gt;

&lt;p&gt;The following command assumes that a bridge interface &lt;code&gt;br-local&lt;/code&gt; exists on
the local side while &lt;code&gt;br-remote&lt;/code&gt; exists on the remote side:&lt;/p&gt;


  
  
  
  


&lt;figure class=&#34;highlight &#34;&gt;
  &lt;figcaption&gt;
    
  &lt;/figcaption&gt;
  &lt;table&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td class=&#34;gutter&#34;&gt;
          &lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;
        &lt;/td&gt;
        &lt;td class=&#34;code&#34;&gt;
          &lt;pre class=&#34; code-highlight&#34;&gt;root » ssh -o &amp;#34;PermitLocalCommand=yes&amp;#34; \
           -o &amp;#34;LocalCommand=brctl addif br-local tap5 &amp;amp;&amp;amp; ifconfig tap5 up&amp;#34; \
           -o Tunnel=ethernet \
           -w 5:5 \
           -t root@REMOTE_HOST \
           &amp;#34;brctl addif br-remote tap5 &amp;amp;&amp;amp; ifconfig tap5 up&amp;#34;&lt;/pre&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>Replacing multiple Vagrant VMs with LXC containers</title>
      <link>https://blog.pboehm.org/blog/2014/12/19/replacing-multiple-vagrant-vms-with-lxc-containers/</link>
      <pubDate>Fri, 19 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.pboehm.org/blog/2014/12/19/replacing-multiple-vagrant-vms-with-lxc-containers/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;m currently working in an environment where the development setup consists of
6 individual VirtualBox VMs handled by &lt;a href=&#34;http://vagrantup.com&#34;&gt;vagrant&lt;/a&gt;. This
could be a problem on devices with low amount of memory, such as Macbook Air
&amp;hellip;&lt;/p&gt;

&lt;p&gt;This post describes a setup with a single VM which hosts all other VMs as LXC
containers with minimal overhead. The tricky part here is the network setup, so
that your developer machine is in the same network as the containers, which
then allows direct access to and from the containers.&lt;/p&gt;

&lt;p&gt;This setup also allows the usage of LXC on developer machines running OSX or
Windows, which normally doesn&amp;rsquo;t support LXC.&lt;/p&gt;

&lt;p&gt;The developer machine and all LXC containers are connected to
an ethernet bridge &lt;code&gt;lxcbr1&lt;/code&gt; inside the base box. This interface acts like a
normal ethernet switch and is the key component of this solution.&lt;/p&gt;

&lt;h2 id=&#34;project-layout&#34;&gt;Project Layout&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;.
├── Vagrantfile
└── deployment
    └── Vagrantfile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Vagrantfile&lt;/code&gt; in the project root handles the base box and mounts the
directory &lt;code&gt;deployment/&lt;/code&gt; into the box. Inside the base box, the other
&lt;code&gt;Vagrantfile&lt;/code&gt; is used for setting up the LXC containers.&lt;/p&gt;

&lt;h2 id=&#34;the-base-box&#34;&gt;The Base Box&lt;/h2&gt;

&lt;h4 id=&#34;vagrantfile&#34;&gt;&lt;code&gt;Vagrantfile&lt;/code&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;VAGRANTFILE_API_VERSION = &amp;quot;2&amp;quot;

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = &amp;quot;ubuntu/trusty64&amp;quot;
  config.vm.hostname = &amp;quot;devbox&amp;quot;
  config.vm.synced_folder &amp;quot;deployment/&amp;quot;, &amp;quot;/deployment&amp;quot;
  config.vm.network &amp;quot;private_network&amp;quot;, ip: &amp;quot;192.168.42.10&amp;quot;, auto_config: false

  config.vm.provider &amp;quot;virtualbox&amp;quot; do |vb|
     vb.customize [&amp;quot;modifyvm&amp;quot;, :id, &amp;quot;--memory&amp;quot;, &amp;quot;1024&amp;quot;]
     vb.customize [&amp;quot;modifyvm&amp;quot;, :id, &amp;quot;--nicpromisc2&amp;quot;, &amp;quot;allow-all&amp;quot;]
  end

  config.vm.provision :shell, :inline =&amp;gt; BOX_SETUP_SCRIPT, privileged: false
  config.vm.provision :shell, :inline =&amp;gt; VAGRANT_STARTUP_SCRIPT, run: &amp;quot;always&amp;quot;, privileged: false
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pay attention to the &lt;code&gt;--nicpromisc2&lt;/code&gt; argument, which tells VirtualBox to put
the second interface into promiscuous mode, so that all traffic reaching the
interface will be transfered. Without this flag, no direct communication
between the developer machine and any LXC-container would be successful.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BOX_SETUP_SCRIPT = &amp;lt;&amp;lt;END
#!/bin/bash

sudo apt-get update
sudo apt-get install -y lxc lxc-templates cgroup-lite redir bridge-utils

cat &amp;lt;&amp;lt; EOF &amp;gt; /tmp/lxcbr1.cfg
auto eth1
iface eth1 inet manual
        up ifconfig eth1 promisc up
        down ifconfig eth1 promisc down

auto lxcbr1
iface lxcbr1 inet static
    address 192.168.42.10
    broadcast 192.168.42.255
    netmask 255.255.255.0
    bridge_ports eth1
    bridge_stp off
    bridge_waitport 0
    bridge_fd 0
EOF

sudo mv /tmp/lxcbr1.cfg /etc/network/interfaces.d/lxcbr1.cfg

sudo service networking restart
sudo ifup lxcbr1

cd /tmp
wget -q https://dl.bintray.com/mitchellh/vagrant/vagrant_1.6.5_x86_64.deb

sudo dpkg -i vagrant_1.6.5_x86_64.deb
vagrant plugin install vagrant-lxc
END
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This script is used once for setting up the base box by installing &lt;code&gt;vagrant&lt;/code&gt;,
&lt;code&gt;vagrant-lxc&lt;/code&gt;, all dependencies and also configures the &lt;code&gt;lxcbr1&lt;/code&gt;-bridge
persistently.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;VAGRANT_STARTUP_SCRIPT = &amp;lt;&amp;lt;END
#!/bin/bash

cd /deployment
vagrant up
END
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This provisioner script is executed every time &lt;code&gt;vagrant&lt;/code&gt; starts the base
box and it boots the LXC containers.&lt;/p&gt;

&lt;h2 id=&#34;the-container-setup&#34;&gt;The Container Setup&lt;/h2&gt;

&lt;h4 id=&#34;deployment-vagrantfile&#34;&gt;&lt;code&gt;deployment/Vagrantfile&lt;/code&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;VAGRANTFILE_API_VERSION = &amp;quot;2&amp;quot;
BASE_IMAGE = &amp;quot;fgrehm/precise64-lxc&amp;quot;

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  config.vm.define :lxc1 do |box|
    box.vm.hostname = &amp;quot;lxc1&amp;quot;
    box.vm.box = BASE_IMAGE
    box.vm.provider :lxc do |provider|
       provider.customize &amp;quot;network.type&amp;quot;, &amp;quot;veth&amp;quot;
       provider.customize &amp;quot;network.flags&amp;quot;, &amp;quot;up&amp;quot;
       provider.customize &amp;quot;network.link&amp;quot;, &amp;quot;lxcbr1&amp;quot;
       provider.customize &amp;quot;network.ipv4&amp;quot;, &amp;quot;192.168.42.2/24&amp;quot;
    end
  end

  config.vm.define :lxc2 do |box|
    box.vm.hostname = &amp;quot;lxc2&amp;quot;
    box.vm.box = BASE_IMAGE
    box.vm.provider :lxc do |provider|
       provider.customize &amp;quot;network.type&amp;quot;, &amp;quot;veth&amp;quot;
       provider.customize &amp;quot;network.flags&amp;quot;, &amp;quot;up&amp;quot;
       provider.customize &amp;quot;network.link&amp;quot;, &amp;quot;lxcbr1&amp;quot;
       provider.customize &amp;quot;network.ipv4&amp;quot;, &amp;quot;192.168.42.3/24&amp;quot;
    end
  end

  # ....
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This &lt;code&gt;Vagrantfile&lt;/code&gt; handles the LXC containers and is the place where you build
your infrastructure with LXC as a provider.&lt;/p&gt;

&lt;h2 id=&#34;startup&#34;&gt;Startup&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;# from inside your project
vagrant up

# this should be successful
ping 192.168.42.2
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>git: simple but powerful workflow</title>
      <link>https://blog.pboehm.org/blog/2013/03/31/git-simple-but-powerful-workflow/</link>
      <pubDate>Sun, 31 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.pboehm.org/blog/2013/03/31/git-simple-but-powerful-workflow/</guid>
      <description>&lt;p&gt;&lt;code&gt;git&lt;/code&gt; the distributed version control system built for the Linux kernel is widely used
nowadays and has been adapted by more and more dev-teams. Developing with &lt;code&gt;git&lt;/code&gt;
in a small team requires a different workflow to &lt;code&gt;push/pull/merge/rebase&lt;/code&gt;
without any problems. This post describes a minimal workflow, which builds up on
feature branches on which the developer implements their changes. The
&lt;code&gt;master&lt;/code&gt;-branch tracks the remote changes and the feature branch will be merged
into &lt;code&gt;master&lt;/code&gt; if the work is done.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The workflow requires the following steps:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a feature branch by typing &lt;code&gt;feature MYLITTLEBRANCHNAME&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A new branch called &lt;code&gt;MYLITTLEBRANCHNAME&lt;/code&gt; has been created and checked out for you&lt;/li&gt;
&lt;li&gt;You will edit some files and create some commits until your feature is complete&lt;/li&gt;
&lt;li&gt;Merge your changes into &lt;code&gt;master&lt;/code&gt; by typing &lt;code&gt;merge_with_master&lt;/code&gt;. This will
checkout the &lt;code&gt;master&lt;/code&gt;-branch and runs a &lt;code&gt;git pull&lt;/code&gt; on it. Now it tries to merge your
branch. If new commits are added to &lt;code&gt;master&lt;/code&gt; since you created your
feature-branch, a Fast-Forward-Merge is not possible and &lt;code&gt;merge_with_master&lt;/code&gt;
asks you if it should rebase your changes on the current &lt;code&gt;master&lt;/code&gt;. If you
accept this, a &lt;code&gt;git rebase master&lt;/code&gt; will be executed and another attempt to
merge your code into &lt;code&gt;master&lt;/code&gt; will be started.&lt;/li&gt;
&lt;li&gt;Your changes are now merged into &lt;code&gt;master&lt;/code&gt; and the feature-branch has been
deleted. You can now push your code to a remote &lt;code&gt;git&lt;/code&gt;-repo.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The workflow is implemented as a shell-alias and a shell-function which should
work in both &lt;code&gt;zsh&lt;/code&gt; and &lt;code&gt;bash&lt;/code&gt;. To install it, copy the following lines into
your &lt;code&gt;~/.[bash|zsh]rc&lt;/code&gt; and start a new shell-session.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/pboehm/5282061.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;The workflow in action&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The following shell session shows the workflow in action. A situation, where a
Fast-Forward-Merge is not possible, is created and than resolved by
&lt;code&gt;merge_with_master&lt;/code&gt;. All lines started by a &lt;code&gt;$&lt;/code&gt;-sign are shell commands.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ echo &amp;quot;Test&amp;quot; &amp;gt;&amp;gt; README.md
$ git add . &amp;amp;&amp;amp; git commit -am &amp;quot;Added README&amp;quot;
[master (root-commit) 50c0b89] Added README
1 file changed, 1 insertion(+)
create mode 100644 README.md
$ feature README_improvements
Switched to a new branch &#39;README_improvements&#39;
$ git checkout master
Switched to branch &#39;master&#39;
$ echo &amp;quot;\nTesttest&amp;quot; &amp;gt;&amp;gt; README.md
$ git add . &amp;amp;&amp;amp; git commit -am &amp;quot;Updated README&amp;quot;
[master 483c7b6] Updated README
1 file changed, 2 insertions(+)
$ git checkout README_improvements
Switched to branch &#39;README_improvements&#39;
$ echo &amp;quot;*.pyc&amp;quot; &amp;gt;&amp;gt; .gitignore
$ git add . &amp;amp;&amp;amp; git commit -am &amp;quot;Added .gitignore&amp;quot;
[README_improvements 7a84507] Added .gitignore
1 file changed, 1 insertion(+)
create mode 100644 .gitignore
$ merge_with_master
Switched to branch &#39;master&#39;
fatal: Not possible to fast-forward, aborting.
Switched to branch &#39;README_improvements&#39;
Your are behind master, a clean Merge is not possible!
Should I rebase it with master and try it again? (y/n) y
First, rewinding head to replay your work on top of it...
Applying: Added .gitignore
Switched to branch &#39;master&#39;
Updating 483c7b6..49445e7
Fast-forward
.gitignore | 1 +
1 file changed, 1 insertion(+)
create mode 100644 .gitignore
Deleted branch README_improvements (was 49445e7).
You can now &#39;git push&#39; your code
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>